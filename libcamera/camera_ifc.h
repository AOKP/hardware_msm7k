#ifndef CAMERA_IFC_H
#define CAMERA_IFC_H

#define FEATURE_CAMERA_V7
#define FEATURE_NATIVELINUX
#define FEATURE_CAMERA_ENCODE_PROPERTIES

typedef enum {
 QDSP_MODULE_KERNEL,
 QDSP_MODULE_AFETASK,
 QDSP_MODULE_AUDPLAY0TASK,
 QDSP_MODULE_AUDPLAY1TASK,
 QDSP_MODULE_AUDPPTASK,
 QDSP_MODULE_VIDEOTASK,
 QDSP_MODULE_VIDEO_AAC_VOC,
 QDSP_MODULE_PCM_DEC,
 QDSP_MODULE_AUDIO_DEC_MP3,
 QDSP_MODULE_AUDIO_DEC_AAC,
 QDSP_MODULE_AUDIO_DEC_WMA,
 QDSP_MODULE_HOSTPCM,
 QDSP_MODULE_DTMF,
 QDSP_MODULE_AUDRECTASK,
 QDSP_MODULE_AUDPREPROCTASK,
 QDSP_MODULE_SBC_ENC,
 QDSP_MODULE_VOC,
 QDSP_MODULE_VOC_PCM,
 QDSP_MODULE_VOCENCTASK,
 QDSP_MODULE_VOCDECTASK,
 QDSP_MODULE_VOICEPROCTASK,
 QDSP_MODULE_VIDEOENCTASK,
 QDSP_MODULE_VFETASK,
 QDSP_MODULE_WAV_ENC,
 QDSP_MODULE_AACLC_ENC,
 QDSP_MODULE_VIDEO_AMR,
 QDSP_MODULE_VOC_AMR,
 QDSP_MODULE_VOC_EVRC,
 QDSP_MODULE_VOC_13K,
 QDSP_MODULE_VOC_FGV,
 QDSP_MODULE_DIAGTASK,
 QDSP_MODULE_JPEGTASK,
 QDSP_MODULE_LPMTASK,
 QDSP_MODULE_QCAMTASK,
 QDSP_MODULE_MODMATHTASK,
 QDSP_MODULE_AUDPLAY2TASK,
 QDSP_MODULE_AUDPLAY3TASK,
 QDSP_MODULE_AUDPLAY4TASK,
 QDSP_MODULE_GRAPHICSTASK,
 QDSP_MODULE_MIDI,
 QDSP_MODULE_GAUDIO,
 QDSP_MODULE_VDEC_LP_MODE,
 QDSP_MODULE_MAX,
 QDSP_MODULE_32BIT_DUMMY = 0x10000
} qdsp_module_type;

typedef enum
{
 CAMERA_SUCCESS = 0,
 CAMERA_INVALID_STATE,
 CAMERA_INVALID_PARM,
 CAMERA_INVALID_FORMAT,
 CAMERA_NO_SENSOR,
 CAMERA_NO_MEMORY,
 CAMERA_NOT_SUPPORTED,
 CAMERA_FAILED,
 CAMERA_INVALID_STAND_ALONE_FORMAT,
 CAMERA_MALLOC_FAILED_STAND_ALONE,
 CAMERA_RET_CODE_MAX
} camera_ret_code_type;

typedef enum
{

 CAMERA_YCBCR,
#ifdef FEATURE_CAMERA_V7
 CAMERA_YCBCR_4_2_0,
 CAMERA_YCBCR_4_2_2,
 CAMERA_H1V1,
 CAMERA_H2V1,
 CAMERA_H1V2,
 CAMERA_H2V2,
 CAMERA_BAYER_8BIT,
 CAMERA_BAYER_10BIT,
#endif

 CAMERA_RGB565,

 CAMERA_RGB666,

 CAMERA_RGB444,

 CAMERA_BAYER_BGGR,

 CAMERA_BAYER_GBRG,

 CAMERA_BAYER_GRBG,

 CAMERA_BAYER_RGGB,

 CAMERA_RGB888
} camera_format_type;

typedef struct
{

 camera_format_type format;

 uint16_t dx;
 uint16_t dy;

 uint16_t captured_dx;
 uint16_t captured_dy;

 uint16_t rotation;

#ifdef FEATURE_CAMERA_V7

 uint8_t *thumbnail_image;
#endif

 uint8_t *buffer;

#ifdef FEATURE_NATIVELINUX
 uint8_t *Y_Addr;
 uint8_t *CbCr_Addr;
 uint32_t *buf_Virt_Addr;
 uint32_t header_size;

 uint32_t buffer_phy_addr;
 uint32_t thumbnail_phy_addr;

 uint32_t pmem_id;
#endif
} camera_frame_type;

typedef enum
{
 CAMERA_DEVICE_MEM,
 CAMERA_DEVICE_EFS,
 CAMERA_DEVICE_MAX
} camera_device_type;

typedef enum
{
 CAMERA_RAW,
 CAMERA_JPEG,
 CAMERA_PNG,
 CAMERA_YCBCR_ENCODE,
 CAMERA_ENCODE_TYPE_MAX
} camera_encode_type;

typedef struct {
 uint32_t buf_len;
 uint32_t used_len;
 uint8_t valid;
 uint8_t *buffer;
} camera_encode_mem_type;

#define MAX_JPEG_ENCODE_BUF_NUM 16
#define MAX_JPEG_ENCODE_BUF_LEN (1024*16)

typedef struct {
 camera_device_type device;
#ifndef FEATURE_CAMERA_ENCODE_PROPERTIES
 int32_t quality;
 camera_encode_type format;
#endif
 int32_t encBuf_num;
 camera_encode_mem_type encBuf[MAX_JPEG_ENCODE_BUF_NUM];
} camera_handle_mem_type;

typedef union
{
 camera_device_type device;
 camera_handle_mem_type mem;
} camera_handle_type;

typedef enum
{
 CAMERA_RSP_CB_SUCCESS,
 CAMERA_EXIT_CB_DONE,
 CAMERA_EXIT_CB_FAILED,
 CAMERA_EXIT_CB_DSP_IDLE,
 CAMERA_EXIT_CB_DSP_ABORT,
 CAMERA_EXIT_CB_ABORT,
 CAMERA_EXIT_CB_ERROR,
 CAMERA_EVT_CB_FRAME,
 CAMERA_EVT_CB_PICTURE,
 CAMERA_STATUS_CB,
 CAMERA_EXIT_CB_FILE_SIZE_EXCEEDED,
 CAMERA_EXIT_CB_BUFFER,
 CAMERA_EVT_CB_SNAPSHOT_DONE,
 CAMERA_CB_MAX
} camera_cb_type;

typedef enum
{
 CAMERA_FUNC_START,
 CAMERA_FUNC_STOP,
 CAMERA_FUNC_SET_DIMENSIONS,
 CAMERA_FUNC_START_PREVIEW,
 CAMERA_FUNC_TAKE_PICTURE,
 CAMERA_FUNC_ENCODE_PICTURE,
 CAMERA_FUNC_COLOR_CONVERT,
 CAMERA_FUNC_START_RECORD,
 CAMERA_FUNC_START_FOCUS,
 CAMERA_FUNC_SET_OVERLAY,
 CAMERA_FUNC_CLR_OVERLAY,
 CAMERA_FUNC_SET_ICON_ARRAY,
 CAMERA_FUNC_CLR_ICON_ARRAY,
 CAMERA_FUNC_SET_POSITION,
 CAMERA_FUNC_SET_EXIF_TAG,
 CAMERA_FUNC_SET_PARM,
#ifdef FEATURE_QVPHONE
 CAMERA_FUNC_ENABLE_QVP,
 CAMERA_FUNC_DISABLE_QVP,
 CAMERA_FUNC_START_QVP_ENCODE,
 CAMERA_FUNC_STOP_QVP_ENCODE,
 CAMERA_FUNC_QVP_RESET,
#endif
 CAMERA_FUNC_RELEASE_ENCODE_BUFFER,
 CAMERA_FUNC_MAX,

#ifdef FEATURE_CAMERA_MULTI_SENSOR
 CAMERA_FUNC_SELECT_SENSOR,
#endif
 CAMERA_FUNC_STOP_PREVIEW,
 CAMERA_FUNC_RELEASE_PICTURE,
 CAMERA_FUNC_PAUSE_RECORD,
 CAMERA_FUNC_RESUME_RECORD,
 CAMERA_FUNC_STOP_RECORD,
 CAMERA_FUNC_STOP_FOCUS,
 CAMERA_FUNC_ENABLE_FRAME_CALLBACK,
 CAMERA_FUNC_DISABLE_FRAME_CALLBACK,
 CAMERA_FUNC_RELEASE_FRAME,
#ifdef FEATURE_VIDEO_ENCODE
 CAMERA_FUNC_VIDEO_ENGINE_CB,
 CAMERA_FUNC_VIDEO_HANDSHAKE,
#endif
 CAMERA_FUNC_BLT,
 CAMERA_FUNC_GET_INFO,
 CAMERA_FUNC_GET_PARM,
 CAMERA_FUNC_SET_REFLECT,
#ifdef FEATURE_CAMERA_V7
 CAMERA_FUNC_INIT_RECORD,
 CAMERA_FUNC_OFFLINE_SNAPSHOT,
#endif
 CAMERA_FUNC_TAKE_MULTIPLE_PICTURES,
 CAMERA_FUNC_PRVW_HISTOGRAM,
 CAMERA_FUNC_SET_ZOOM,
 CAMERA_FUNC_MAX1,

} camera_func_type;

typedef void (*camera_cb_f_type)(camera_cb_type cb,
 const void *client_data,
 camera_func_type func,
 int32_t parm4);

typedef struct {
 int32_t quality;
 camera_encode_type format;
 int32_t file_size;
} camera_encode_properties_type;

typedef enum
{

 CAMERA_PARM_STATE,

 CAMERA_PARM_ACTIVE_CMD,

 CAMERA_PARM_ZOOM,

 CAMERA_PARM_ENCODE_ROTATION,

 CAMERA_PARM_SENSOR_POSITION,

 CAMERA_PARM_CONTRAST,

 CAMERA_PARM_BRIGHTNESS,

 CAMERA_PARM_SHARPNESS,
 CAMERA_PARM_EXPOSURE,
 CAMERA_PARM_WB,
 CAMERA_PARM_EFFECT,
 CAMERA_PARM_AUDIO_FMT,
 CAMERA_PARM_FPS,
 CAMERA_PARM_FLASH,
 CAMERA_PARM_RED_EYE_REDUCTION,
 CAMERA_PARM_NIGHTSHOT_MODE,
 CAMERA_PARM_REFLECT,
 CAMERA_PARM_PREVIEW_MODE,
 CAMERA_PARM_ANTIBANDING,

 CAMERA_PARM_FOCUS_STEP,
 CAMERA_PARM_FOCUS_RECT,
 CAMERA_PARM_AF_MODE,
#ifdef FEATURE_CAMERA_V7

 CAMERA_PARM_AUTO_EXPOSURE_MODE,
#endif
#ifdef FEATURE_CAMERA_INCALL
 CAMERA_PARM_INCALL,
#endif
#ifdef FEATURE_VIDEO_ENCODE_FADING
 CAMERA_PARM_FADING,
#endif
 CAMERA_PARM_ISO,
#ifdef FEATURE_CAMERA_V7

 CAMERA_PARM_EXPOSURE_COMPENSATION,
 CAMERA_PARM_PREVIEW_FPS,
 CAMERA_PARM_EXPOSURE_METERING,
 CAMERA_PARM_APERTURE,
 CAMERA_PARM_SHUTTER_SPEED,
 CAMERA_PARM_FLASH_STATE,
#endif
 CAMERA_PARM_HUE,
 CAMERA_PARM_SATURATION,
 CAMERA_PARM_LUMA_ADAPTATION,
#ifdef FEATURE_VIDENC_TRANSITION_EFFECTS
 CAMERA_PARM_TRANSITION,
 CAMERA_PARM_TRANSITION_ALPHA,
 CAMERA_PARM_TRANSITION_CURTAIN,
 CAMERA_PARM_TRANSITION_OFF,
#endif
#ifdef FEATURE_CAMERA_V770
 CAMERA_PARM_FRAME_TIMESTAMP,
 CAMERA_PARM_STROBE_FLASH,
#endif
 CAMERA_PARM_HISTOGRAM,
#ifdef FEATURE_CAMERA_BESTSHOT_MODE
 CAMERA_PARM_BESTSHOT_MODE,
#endif
#ifdef FEATURE_VIDEO_ENCODE
 CAMERA_PARM_SPACE_LIMIT,
#ifdef FEATURE_CAMCORDER_DIS
 CAMERA_PARM_DIS,
#endif
#endif
#ifdef FEATURE_CAMERA_V7
 CAMERA_PARM_FPS_LIST,
#endif
 CAMERA_PARM_MAX
} camera_parm_type;

typedef struct
{
 uint32_t timestamp;
 double latitude;
 double longitude;
 int16_t altitude;
} camera_position_type;

typedef enum
{
 CAMERA_AUTO_FOCUS,
 CAMERA_MANUAL_FOCUS
} camera_focus_e_type;

typedef enum
{
 JPEGENC_DSP_FAIL,
 JPEGENC_DSP_SUCCESS,
 JPEGENC_DSP_BAD_CMD,
 JPEGENC_IMG_DONE,
 JPEGENC_IMG_ABORT,
 JPEGENC_IMG_FAIL,
 JPEGENC_FILE_SIZE_FAIL,
 JPEGENC_FILLED_BUFFER
} JPEGENC_msgType;

typedef enum
{
#ifdef FEATURE_EFS
 JPEGENC_EFS,
#endif
 JPEGENC_MEM
} JPEGENC_outputType;

typedef struct
{
 int32_t clientId;

 JPEGENC_msgType status;
 uint32_t dcBitCnt;

 uint32_t header_size;

 JPEGENC_outputType mode;
   void *outPtr;

 uint32_t size;

} JPEGENC_CBrtnType;

typedef enum
{
 CAMERA_WB_MIN_MINUS_1,
 CAMERA_WB_AUTO = 1,
 CAMERA_WB_CUSTOM,
 CAMERA_WB_INCANDESCENT,
 CAMERA_WB_FLUORESCENT,
 CAMERA_WB_DAYLIGHT,
 CAMERA_WB_CLOUDY_DAYLIGHT,
 CAMERA_WB_TWILIGHT,
 CAMERA_WB_SHADE,
 CAMERA_WB_MAX_PLUS_1
} camera_wb_type;

typedef enum
{
 CAMERA_EFFECT_MIN_MINUS_1,
 CAMERA_EFFECT_OFF = 1,
 CAMERA_EFFECT_MONO,
 CAMERA_EFFECT_NEGATIVE,
 CAMERA_EFFECT_SOLARIZE,
 CAMERA_EFFECT_PASTEL,
 CAMERA_EFFECT_MOSAIC,
 CAMERA_EFFECT_RESIZE,
 CAMERA_EFFECT_SEPIA,
 CAMERA_EFFECT_POSTERIZE,
 CAMERA_EFFECT_WHITEBOARD,
 CAMERA_EFFECT_BLACKBOARD,
 CAMERA_EFFECT_AQUA,
 CAMERA_EFFECT_MAX_PLUS_1
} camera_effect_type;

typedef enum
{
 CAMERA_ANTIBANDING_OFF,
 CAMERA_ANTIBANDING_60HZ,
 CAMERA_ANTIBANDING_50HZ,
 CAMERA_ANTIBANDING_AUTO,
 CAMERA_MAX_ANTIBANDING,
} camera_antibanding_type;

typedef enum
{
 CAMERA_PREVIEW_MODE_SNAPSHOT,
 CAMERA_PREVIEW_MODE_MOVIE,
 CAMERA_MAX_PREVIEW_MODE
} camera_preview_mode_type;

typedef enum
{
 CAMERA_ERROR_NO_MEMORY,
 CAMERA_ERROR_EFS_FAIL,
 CAMERA_ERROR_EFS_FILE_OPEN,
 CAMERA_ERROR_EFS_FILE_NOT_OPEN,
 CAMERA_ERROR_EFS_FILE_ALREADY_EXISTS,
 CAMERA_ERROR_EFS_NONEXISTENT_DIR,
 CAMERA_ERROR_EFS_NONEXISTENT_FILE,
 CAMERA_ERROR_EFS_BAD_FILE_NAME,
 CAMERA_ERROR_EFS_BAD_FILE_HANDLE,
 CAMERA_ERROR_EFS_SPACE_EXHAUSTED,
 CAMERA_ERROR_EFS_OPEN_TABLE_FULL,
 CAMERA_ERROR_EFS_OTHER_ERROR,
 CAMERA_ERROR_CONFIG,
 CAMERA_ERROR_EXIF_ENCODE,
 CAMERA_ERROR_VIDEO_ENGINE,
 CAMERA_ERROR_IPL,
 CAMERA_ERROR_INVALID_FORMAT,
 CAMERA_ERROR_MAX
} camera_error_type;

#endif
